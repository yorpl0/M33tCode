import mongoose from "mongoose";

const submissionSchema = new mongoose.Schema(
    {
        problem: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Problem', // Reference to your Problem model
            required: true,
        },
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User', // Reference to your User model (assuming you have one)
            required: true,
        },
        userCode: {
            type: String,
            required: true,
        },
        userLanguage: {
            type: String,
            required: true,
            enum: ['javascript', 'python', 'cpp', 'java'], // Ensure these match Judge0 IDs later
        },
        // Judge0 related fields - these will be populated after Judge0 returns a result
        judge0SubmissionToken: {
            type: String,
            unique: true,
            sparse: true, // Allows null values, but ensures uniqueness if present
        },
        verdict: {
            type: String,
            // Expanded enum to include all possible verdicts from Judge0 and internal errors
            enum: [
                'Pending',
                'Accepted',
                'Accepted (with warnings)',
                'Wrong Answer',
                'Time Limit Exceeded',
                'Memory Limit Exceeded',
                'Runtime Error (NZEC)', // Specific Judge0 runtime error for non-zero exit code
                'Runtime Error',        // Generic runtime error
                'Compilation Error',
                'Internal Error',       // For Judge0 internal issues
                'Unknown Error',        // For unexpected statuses
                'Judge0 API Error',     // For errors during communication with Judge0
                'Server Error'          // For unexpected server-side errors
            ],
            default: "Pending", // Initial status
        },
        stdout: { // Standard output from the user's code (e.g., from the overall submission)
            type: String,
        },
        stderr: { // Standard error from the user's code (e.g., from runtime errors or overall issues)
            type: String,
        },
        compileOutput: { // Compiler output (if compilation fails)
            type: String,
        },
        time: { // Total execution time across all test cases, or max time if preferred
            type: Number,
        },
        memory: { // Maximum memory usage across all test cases
            type: Number,
        },
        // --- NEW FIELD FOR DETAILED TEST CASE RESULTS ---
        testCaseResults: [{
            input: String,
            expectedOutput: String,
            actualOutput: String, // Output generated by the user's code for this test case
            verdict: String,     // Verdict specific to this test case
            time: Number,        // Time taken for this test case
            memory: Number,      // Memory used for this test case
            stderr: String,      // Stderr specific to this test case
            compileOutput: String, // Compile output specific to this test case (usually null if overall compilation passed)
            _id: false // Prevents Mongoose from creating an _id for subdocuments in this array
        }],
    },
    { timestamps: true } // Adds createdAt and updatedAt automatically
);

const Submission = mongoose.model('Submission', submissionSchema);

export default Submission;
